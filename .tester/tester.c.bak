#include "../ft_printf.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

// Helper function to run and compare printf and ft_printf
void	run_test(const char *test_name, const char *format, ...)
{
	va_list args;
	int ret_ori, ret_ft;

	printf("- %s:\n", test_name);

	// Test with printf
	printf("-- printf: ");
	fflush(stdout);
	va_start(args, format);
	ret_ori = vprintf(format, args); // Use vprintf for printf
	va_end(args);
	printf(" | Return Value: %d\n", ret_ori);

	// Test with ft_printf
	printf("-- ft_printf: ");
	fflush(stdout);
	va_start(args, format);

	// Pass arguments manually to ft_printf based on specifiers
	if (strchr(format, '%') != NULL)
	{ // Check if format has a specifier
        	if (strchr(format, 'd') || strchr(format, 'i'))
		{
			int value = va_arg(args, int);
			ret_ft = ft_printf(format, value); // Pass int directly
		}
		else if (strchr(format, 'u'))
		{
			unsigned int value = va_arg(args, unsigned int);
			ret_ft = ft_printf(format, value); // Pass unsigned int directly
		}
		else if (strchr(format, 's'))
		{
			char *value = va_arg(args, char *);
			ret_ft = ft_printf(format, value); // Pass string directly
		}
		else if (strchr(format, 'c'))
		{
			char value = (char)va_arg(args, int);
			ret_ft = ft_printf(format, value); // Pass char directly
		}
		else if (strchr(format, '%')) 
			ret_ft = ft_printf(format); // Handle literals like "%%"
		else 
			ret_ft = ft_printf(format); // Default
	}
	else
		ret_ft = ft_printf(format); // No specifiers

	va_end(args);
	printf(" | Return Value: %d\n\n", ret_ft);

	fflush(stdout); // Ensure all output is flushed
}

int	main(void)
{
	printf("Initializing ft_printf testing!\n");
	printf("Starting tests:\n\n");

	run_test("Decimal Test", "Decimal: %d", 123);
	run_test("Integer Test", "Integer: %i", -456);
	run_test("Unsigned Test", "Unsigned: %u", 123456);
	return 0;
}
